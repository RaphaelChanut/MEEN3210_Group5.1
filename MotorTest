//Holds program if a fault is detected on either motor driver
void stopIfFault()
{
  if (md.getM1Fault())
  {
    Serial.println("M1 fault");
    while(1);
  }
  if (md.getM2Fault())
  {
    Serial.println("M2 fault");
    while(1);
  }
}

//Function used to control motors
void motorControl()
{
  //Turns in circle accelerating/decelerating from 0 to full speed
  for(int i = 0; i <= sizeof(motorSpeed_Fwd); i++)
  { 
    md.setM1Speed(motorSpeed_Fwd[i]);
    md.setM2Speed(motorSpeed_Rev[i]);
    lcd.print(motorSpeed_Fwd[i]/4, "% Duty Cycle");
    delay(5000);
  }
  for(int i = sizeof(motorSpeed_Fwd); i >= 0; i--)
  { 
    md.setM1Speed(motorSpeed_Fwd[i]);
    md.setM2Speed(motorSpeed_Rev[i]);
    lcd.print(motorSpeed_Fwd[i]/4, "% Duty Cycle");
    delay(5000);
  }

  //Goes straight accelerating/decelerating from 0 to full speed
/*  for(int i = 0; i <= sizeof(motorSpeed_Fwd); i++)
  { 
    md.setM1Speed(motorSpeed_Fwd[i]);
    md.setM2Speed(motorSpeed_Fwd[i]);
    lcd.print(motorSpeed_Fwd[i]/4, "% Duty Cycle");
    delay(1000);
  }
  for(int i = sizeof(motorSpeed_Fwd); i >= 0; i--)
  { 
    md.setM1Speed(motorSpeed_Fwd[i]);
    md.setM2Speed(motorSpeed_Fwd[i]);
    lcd.print(motorSpeed_Fwd[i]/4, "% Duty Cycle");
    delay(1000);
  }
  for(int i = 0; i <= sizeof(motorSpeed_Fwd); i++)
  { 
    md.setM1Speed(motorSpeed_Rev[i]);
    md.setM2Speed(motorSpeed_Rev[i]);
    lcd.print(motorSpeed_Fwd[i]/4, "% Duty Cycle");
    delay(1000);
  }
  for(int i = sizeof(motorSpeed_Fwd); i >= 0; i--)
  { 
    md.setM1Speed(motorSpeed_Rev[i]);
    md.setM2Speed(motorSpeed_Rev[i]);
    lcd.print(motorSpeed_Fwd[i]/4, "% Duty Cycle");
    delay(1000);
  }
*/
  md.setM1Speed(motorCoast);
  md.setM2Speed(motorCoast);
}
